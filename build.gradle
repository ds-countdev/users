plugins {
	id 'java'
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'jacoco'
}

group = 'mx.com.users'
version = 'v1'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.2")
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation files('C:\\Users\\diego\\OneDrive\\Documentos\\Java_jars\\error-handler.jar')
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
}

test {
	useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport{                 
	dependsOn test
	reports {
		html.enabled = true
	}
	afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "**/config/*",
                "**/entity/*",
                "**/model/*",
                "**/util/*",
                "**/enums/*",
                "**/users/UserApplication.*"
            ])
        }))
    }
	finalizedBy jacocoTestCoverageVerification  
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			limit {
				minimum = 0.8
			}
		}
	}
}

